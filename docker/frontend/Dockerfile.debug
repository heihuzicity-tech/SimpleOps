# 第一阶段：构建阶段
FROM node:18-alpine AS builder

# 设置阿里云Alpine镜像源
RUN sed -i 's/dl-cdn.alpinelinux.org/mirrors.aliyun.com/g' /etc/apk/repositories

# 设置npm镜像源
RUN npm config set registry https://registry.npmmirror.com

# 设置工作目录
WORKDIR /build

# 复制package文件
COPY frontend/package*.json ./

# 安装所有依赖（包括开发依赖，用于构建）
RUN npm ci

# 复制源代码 - 注意public和src在frontend目录下
COPY frontend/public ./public
COPY frontend/src ./src
COPY frontend/tsconfig.json ./

# 调试：列出文件结构
RUN echo "=== Current directory structure ===" && \
    ls -la && \
    echo "=== Public directory ===" && \
    ls -la public/ || echo "Public directory not found" && \
    echo "=== Package.json content ===" && \
    cat package.json | grep scripts -A 5

# 设置后端API地址环境变量（构建时）
ENV REACT_APP_API_BASE_URL=http://localhost:8088

# 构建应用
RUN npm run build

# 第二阶段：运行阶段
FROM nginx:alpine

# 设置阿里云Alpine镜像源
RUN sed -i 's/dl-cdn.alpinelinux.org/mirrors.aliyun.com/g' /etc/apk/repositories

# 安装必要工具
RUN apk add --no-cache curl

# 复制构建产物
COPY --from=builder /build/build /usr/share/nginx/html

# 复制nginx配置
COPY docker/frontend/nginx.conf /etc/nginx/conf.d/default.conf

# 创建运行时配置脚本
COPY docker/frontend/env-config.js /usr/share/nginx/html/env-config.js
COPY docker/frontend/entrypoint.sh /entrypoint.sh
RUN chmod +x /entrypoint.sh

# 暴露端口
EXPOSE 80

# 健康检查
HEALTHCHECK --interval=30s --timeout=3s --start-period=10s --retries=3 \
    CMD curl -f http://localhost/ || exit 1

# 启动
ENTRYPOINT ["/entrypoint.sh"]